/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/homescreen_screen/HomeScreenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

HomeScreenViewBase::HomeScreenViewBase() :
    buttonCallback(this, &HomeScreenViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_POLY_ID));
    add(background);

    DetailScreenButton.setXY(444, -1);
    DetailScreenButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_EXPAND_MORE_50_50_78A0B6_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_EXPAND_MORE_50_50_E8F6FB_SVG_ID));
    DetailScreenButton.setIconXY(-7, -7);
    DetailScreenButton.setAction(buttonCallback);
    add(DetailScreenButton);

    gaugeSpeed.setBackground(touchgfx::Bitmap(BITMAP_IMAGE_SPEED_ID));
    gaugeSpeed.setPosition(214, 18, 240, 240);
    gaugeSpeed.setCenter(120, 120);
    gaugeSpeed.setStartEndAngle(-113, 112);
    gaugeSpeed.setRange(0, 200);
    gaugeSpeed.setValue(0);
    gaugeSpeed.setEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    gaugeSpeed.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_SMOOTH_ID, 7, 67);
    gaugeSpeed.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeSpeed.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gaugeSpeed);

    gaugeRPM.setBackground(touchgfx::Bitmap(BITMAP_RPM_METER_ID));
    gaugeRPM.setPosition(15, 88, 184, 184);
    gaugeRPM.setCenter(92, 92);
    gaugeRPM.setStartEndAngle(-135, 135);
    gaugeRPM.setRange(0, 6000);
    gaugeRPM.setValue(0);
    gaugeRPM.setEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    gaugeRPM.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_SMALL_NEEDLES_ROUGH_ID, 8, 53);
    gaugeRPM.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeRPM.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gaugeRPM);

    rpm.setXY(70, 233);
    rpm.setColor(touchgfx::Color::getColorFromRGB(39, 68, 87));
    rpm.setLinespacing(0);
    rpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_55AI));
    add(rpm);

    BasicInfoBox.setPosition(15, 3, 184, 85);
    BasicInfoBox.setColor(touchgfx::Color::getColorFromRGB(120, 160, 182));
    BasicInfoBox.setBorderColor(touchgfx::Color::getColorFromRGB(39, 68, 87));
    BasicInfoBox.setBorderSize(4);
    add(BasicInfoBox);

    speedText.setXY(298, 199);
    speedText.setColor(touchgfx::Color::getColorFromRGB(39, 68, 87));
    speedText.setLinespacing(0);
    Unicode::snprintf(speedTextBuffer, SPEEDTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FK1R).getText());
    speedText.setWildcard(speedTextBuffer);
    speedText.resizeToCurrentText();
    speedText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RS5G));
    add(speedText);

    coolantTempProgressBar.setXY(36, 22);
    coolantTempProgressBar.setProgressIndicatorPosition(0, 0, 100, 10);
    coolantTempProgressBar.setRange(0, 180);
    coolantTempProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    coolantTempProgressBar.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_TINY_ID));
    coolantTempProgressBar.setColor(touchgfx::Color::getColorFromRGB(254, 189, 23));
    coolantTempProgressBar.setValue(5);
    add(coolantTempProgressBar);

    fuelTankLevelProgressBar.setXY(36, 55);
    fuelTankLevelProgressBar.setProgressIndicatorPosition(0, 0, 100, 10);
    fuelTankLevelProgressBar.setRange(0, 100);
    fuelTankLevelProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    fuelTankLevelProgressBar.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_TINY_ID));
    fuelTankLevelProgressBar.setColor(touchgfx::Color::getColorFromRGB(254, 189, 23));
    fuelTankLevelProgressBar.setValue(2);
    add(fuelTankLevelProgressBar);

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_FUEL_PUMP_ID));
    scalableImage1.setPosition(150, 48, 32, 25);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage1);

    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_THERMOMETER_ID));
    scalableImage2.setPosition(150, 15, 28, 25);
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage2);

    coolantTempDivider.setPosition(66, 17, 100, 15);
    coolantTempDividerPainter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    coolantTempDivider.setPainter(coolantTempDividerPainter);
    coolantTempDivider.setStart(20, 5);
    coolantTempDivider.setEnd(20, 25);
    coolantTempDivider.setLineWidth(2);
    coolantTempDivider.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    coolantTempDivider.setAlpha(150);
    add(coolantTempDivider);

    fuelTankDivider.setPosition(27, 50, 100, 15);
    fuelTankDividerPainter.setColor(touchgfx::Color::getColorFromRGB(255, 42, 0));
    fuelTankDivider.setPainter(fuelTankDividerPainter);
    fuelTankDivider.setStart(20, 5);
    fuelTankDivider.setEnd(20, 25);
    fuelTankDivider.setLineWidth(2);
    fuelTankDivider.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    fuelTankDivider.setAlpha(150);
    add(fuelTankDivider);
}

HomeScreenViewBase::~HomeScreenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void HomeScreenViewBase::setupScreen()
{

}

void HomeScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &DetailScreenButton)
    {
        //ScreenChange
        //When DetailScreenButton clicked change screen to DetailsScreen
        //Go to DetailsScreen with no screen transition
        application().gotoDetailsScreenScreenNoTransition();
    }
}
